install.packages("knitr", dependencies=TRUE)
if (!require("pacman")) install.packages("pacman") #Installing pacman if not present
pacman::p_load("RColorBrewer","tidyverse", "readxl", "rvest","dplyr","tidyr","igraph",
"visNetwork", "readr","ggplot2", "ggraph", "graphTweets", "writexl")
#install.packages("rJava")
#install.packages("rcdk")
#install.packages("proxy")
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-17')
library(rJava)
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
library(rJava)
if (!require("pacman")) install.packages("pacman") #Installing pacman if not present
pacman::p_load("RColorBrewer","tidyverse", "readxl", "rvest","dplyr","tidyr","igraph",
"visNetwork", "readr","ggplot2", "ggraph", "graphTweets", "writexl")
install.packages("rJava")
install.packages("rcdk")
install.packages("proxy")
ys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-17')
library(rJava)
library(rcdk)
library(httr)
# Network Analysis
library(proxy)
library(readxl)
# List of directories to create
Dirs <- c("Data/CSV_IQ", "Data/IQ_Plot","Data/CSV_IQNPA", "Data/IQNPA_Plot")
# Loop through the list and create directories if they don't exist
for (dir in Dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE)
}
}
# Load network from a GraphML file. Change the file name as necessary
graphml <- read_graph("Actino_network.graphml", format = "graphml")
Metadata <- read_delim("Metadata_Actinomyces.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
if (!require("pacman")) install.packages("pacman") #Installing pacman if not present
pacman::p_load("RColorBrewer","tidyverse", "readxl", "rvest","dplyr","tidyr","igraph",
"visNetwork", "readr","ggplot2", "ggraph", "graphTweets", "writexl")
install.packages("rJava")
system("where make")  # Should return a path to Rtools if installed correctly
if (!require("pacman")) install.packages("pacman") #Installing pacman if not present
pacman::p_load("RColorBrewer","tidyverse", "readxl", "rvest","dplyr","tidyr","igraph",
"visNetwork", "readr","ggplot2", "ggraph", "graphTweets", "writexl")
install.packages("rJava")
if (!require("pacman")) install.packages("pacman") #Installing pacman if not present
pacman::p_load("RColorBrewer","tidyverse", "readxl", "rvest","dplyr","tidyr","igraph",
"visNetwork", "readr","ggplot2", "ggraph", "graphTweets", "writexl")
install.packages("rJava")
install.packages("rcdk")
install.packages("proxy")
ys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
ys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
if (!require("pacman")) install.packages("pacman") #Installing pacman if not present
pacman::p_load("RColorBrewer","tidyverse", "readxl", "rvest","dplyr","tidyr","igraph",
"visNetwork", "readr","ggplot2", "ggraph", "graphTweets", "writexl")
#install.packages("rJava")
#install.packages("rcdk")
#install.packages("proxy")
ys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-17')
library(rJava)
library(rcdk)
library(httr)
# Network Analysis
library(proxy)
library(readxl)
# List of directories to create
Dirs <- c("Data/CSV_IQ", "Data/IQ_Plot","Data/CSV_IQNPA", "Data/IQNPA_Plot")
# Loop through the list and create directories if they don't exist
for (dir in Dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE)
}
}
# Load network from a GraphML file. Change the file name as necessary
graphml <- read_graph("Actino_network.graphml", format = "graphml")
# List of directories to create
Dirs <- c("Data/CSV_IQ", "Data/IQ_Plot","Data/CSV_IQNPA", "Data/IQNPA_Plot")
# Loop through the list and create directories if they don't exist
for (dir in Dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE)
}
}
# 0- Loading packages
install.packages(c("readr","igraph", "devtools","tidyr", "ggplot2", "dplyr","readxl", "rcdk"))
# 0- Loading packages
# install.packages(c("readr","igraph", "devtools","tidyr", "ggplot2", "dplyr","readxl", "rcdk"))
library(devtools)
library(igraph)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
library(rcdk)
graphml <- read_graph("Actino_network.graphml", format = "graphml")
graphml <- read_graph("Actino_network.graphml", format = "graphml")
r
version
install.packages("installr")
library(installr)
updateR()
# 0- Loading packages
# install.packages(c("readr","igraph", "devtools","tidyr", "ggplot2", "dplyr","readxl", "rcdk"))
library(devtools)
version
version
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("VariantAnnotation")
if (!require("BiocManager", quietly = TRUE, force = TRUE))
install.packages("BiocManager")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("VariantAnnotation", force = TRUE)
BiocManager::install("ensemblVEP")  # For annotation using Ensembl VEP
# Path to your VCF file
vcf_file <- "D:/Documents/ITESM/DCC/9th_Semester/FuNTB/Code/vcf/39_S387.targets.vcf.gz"
# Load the libraries
library(VariantAnnotation)
library(ensemblVEP)
# Read the VCF file
vcf <- readVcf(vcf_file, genome = "Mycobacterium_tuberculosis")
# Read the VCF file
vcf <- readVcf(vcf_file, genome = "D:/Documents/ITESM/DCC/9th_Semester/FuNTB/Code/vcf/Mycobacterium_tuberculosis/snpEffectPredictor.bin")
# Load the libraries
library(VariantAnnotation)
# Path to your VCF file
vcf_file <- "D:/Documents/ITESM/DCC/9th_Semester/FuNTB/Code/vcf/39_S387.targets.vcf.gz"
# Read the VCF file
vcf <- readVcf(vcf_file)
# 0- Loading packages
install.packages(c("readr","igraph", "devtools","tidyr", "ggplot2", "dplyr","readxl", "rcdk"))
library(devtools)
library(igraph)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
library(rcdk)
###Data
# graphml <- read_graph("Actino_network.graphml", format = "graphml")
# Metadata <- read_delim("Metadata_Actinomyces.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
graphml <- read_graph("Actino_network.graphml", format = "graphml")
library(devtools)
library(igraph)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
library(rcdk)
###Data
# graphml <- read_graph("Actino_network.graphml", format = "graphml")
# Metadata <- read_delim("Metadata_Actinomyces.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
graphml <- read_graph("Actino_network.graphml", format = "graphml")
graphml <- read_graph("Actino_network.graphml", format = "graphml")
##Data
# graphml <- read_graph("Actino_network.graphml", format = "graphml")
# Metadata <- read_delim("Metadata_Actinomyces.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
graphml <- read_graph("Actino_network.graphml", format = "graphml")
graphml <- read_graph("Actino_network.graphml", format = "graphml")
Metadata <- read_delim("Metadata_Actinomyces.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
liver_df
library(tidyverse)
library(ggrepel)
library(ggcorrplot)
# Define la ruta al archivo de datos.
ruta_archivo_datos <- "../data/human_liver_rnaseq_gene_expression_903_samples.tsv"
# Usamos la función `read_tsv()` de `tidyverse`.
liver_df <- read_tsv(ruta_archivo_datos)
# script_day_3.R — Contando Historias con Dos Variables: Gráficos de Dispersión y Correlación
# Autor: Instructor del Taller
# Fecha: 04 de Octubre de 2025aea
#
# Descripción:
# Este script acompaña la sesión práctica del Día 3. Hoy cambiamos a un
# conjunto de datos de expresión génica (ARN-Seq) de hígado humano.
# Aprenderemos a crear gráficos de dispersión para visualizar la relación
# entre dos genes y a calcular y visualizar una matriz de correlación para
# un subconjunto de genes de interés.
#
# Decisión Pedagógica:
# Se introduce un nuevo dataset para exponer a los estudiantes a diferentes
# tipos y formatos de datos bioinformáticos (formato "ancho"). Se introduce
# `read_tsv()` para manejar archivos separados por tabuladores. El foco está
# en la interpretación de relaciones y en la creación de visualizaciones
# que resumen datos complejos (mapa de calor de correlación).
# -----------------------------------------------------------------------------
# ---- SECCIÓN 1: CONFIGURACIÓN DEL ENTORNO ----
# Cargamos los paquetes necesarios para hoy. `ggrepel` es nuevo y sirve
# para evitar que las etiquetas de texto se superpongan en los gráficos.
# `ggcorrplot` es para visualizar matrices de correlación.
# Descomenta y ejecuta si no tienes los paquetes instalados.
# install.packages("tidyverse")
# install.packages("ggrepel")
# install.packages("ggcorrplot")
library(tidyverse)
library(ggrepel)
library(ggcorrplot)
# ---- SECCIÓN 2: CARGA DE DATOS ----
# Hoy trabajaremos con un dataset de expresión génica. ¡Es un archivo grande!
# A diferencia de los archivos CSV (separados por comas), este es un archivo TSV
# (separado por tabuladores). Por lo tanto, usamos `read_tsv()`.
# Define la ruta al archivo de datos.
ruta_archivo_datos <- "../data/human_liver_rnaseq_gene_expression_903_samples.tsv"
# Usamos la función `read_tsv()` de `tidyverse`.
liver_df <- read_tsv(ruta_archivo_datos)
# -----------------------------------------------------------------------------
# script_day_4.R — Viendo el Panorama General con Mapas de Calor
# Autor: Instructor del Taller
# Fecha: 04 de Octubre de 2025
#
# Descripción:
# Este script acompaña la sesión práctica del Día 4. El objetivo es crear un
# mapa de calor (heatmap) de alta calidad a partir de datos de expresión génica.
# El script cubre el flujo de trabajo completo:
# 1. Cargar los datos.
# 2. Seleccionar los genes más variables para la visualización.
# 3. Escalar los datos (transformación a Z-score) para visualizar patrones.
# 4. Generar el heatmap con clustering usando el paquete `ComplexHeatmap`.
#
# Decisión Pedagógica:
# Hoy se dedica mucho tiempo al pre-procesamiento de datos. Las funciones
# `apply`, `t`, y `scale` son conceptualmente desafiantes y se explican
# con detalle. Se introduce `ComplexHeatmap` de Bioconductor, una habilidad
# clave en bioinformática, y se explica su sintaxis y método de guardado,
# que difiere de `ggplot2`.
# -----------------------------------------------------------------------------
# ---- SECCIÓN 1: CONFIGURACIÓN DEL ENTORNO ----
# Hoy necesitamos `ComplexHeatmap`. Este paquete está en Bioconductor, no en CRAN.
# La instalación requiere el paquete `BiocManager`.
# Descomenta y ejecuta si no tienes los paquetes instalados.
# install.packages("BiocManager")
# BiocManager::install("ComplexHeatmap")
# install.packages("tidyverse")
library(tidyverse)
library(ComplexHeatmap)
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
# -----------------------------------------------------------------------------
# script_day_4.R — Viendo el Panorama General con Mapas de Calor
# Autor: Instructor del Taller
# Fecha: 04 de Octubre de 2025
#
# Descripción:
# Este script acompaña la sesión práctica del Día 4. El objetivo es crear un
# mapa de calor (heatmap) de alta calidad a partir de datos de expresión génica.
# El script cubre el flujo de trabajo completo:
# 1. Cargar los datos.
# 2. Seleccionar los genes más variables para la visualización.
# 3. Escalar los datos (transformación a Z-score) para visualizar patrones.
# 4. Generar el heatmap con clustering usando el paquete `ComplexHeatmap`.
#
# Decisión Pedagógica:
# Hoy se dedica mucho tiempo al pre-procesamiento de datos. Las funciones
# `apply`, `t`, y `scale` son conceptualmente desafiantes y se explican
# con detalle. Se introduce `ComplexHeatmap` de Bioconductor, una habilidad
# clave en bioinformática, y se explica su sintaxis y método de guardado,
# que difiere de `ggplot2`.
# -----------------------------------------------------------------------------
# ---- SECCIÓN 1: CONFIGURACIÓN DEL ENTORNO ----
# Hoy necesitamos `ComplexHeatmap`. Este paquete está en Bioconductor, no en CRAN.
# La instalación requiere el paquete `BiocManager`.
# Descomenta y ejecuta si no tienes los paquetes instalados.
# install.packages("BiocManager")
# BiocManager::install("ComplexHeatmap")
# install.packages("tidyverse")
library(tidyverse)
library(ComplexHeatmap)
# ---- SECCIÓN 2: CARGA DE DATOS ----
# Continuamos trabajando con el dataset de expresión génica de hígado.
ruta_archivo_datos <- "../data/human_liver_rnaseq_gene_expression_903_samples.tsv"
liver_df <- read_tsv(ruta_archivo_datos)
getwd()
# -----------------------------------------------------------------------------
# script_day_4.R — Viendo el Panorama General con Mapas de Calor
# Autor: Instructor del Taller
# Fecha: 04 de Octubre de 2025
#
# Descripción:
# Este script acompaña la sesión práctica del Día 4. El objetivo es crear un
# mapa de calor (heatmap) de alta calidad a partir de datos de expresión génica.
# El script cubre el flujo de trabajo completo:
# 1. Cargar los datos.
# 2. Seleccionar los genes más variables para la visualización.
# 3. Escalar los datos (transformación a Z-score) para visualizar patrones.
# 4. Generar el heatmap con clustering usando el paquete `ComplexHeatmap`.
#
# Decisión Pedagógica:
# Hoy se dedica mucho tiempo al pre-procesamiento de datos. Las funciones
# `apply`, `t`, y `scale` son conceptualmente desafiantes y se explican
# con detalle. Se introduce `ComplexHeatmap` de Bioconductor, una habilidad
# clave en bioinformática, y se explica su sintaxis y método de guardado,
# que difiere de `ggplot2`.
# -----------------------------------------------------------------------------
# ---- SECCIÓN 1: CONFIGURACIÓN DEL ENTORNO ----
# Hoy necesitamos `ComplexHeatmap`. Este paquete está en Bioconductor, no en CRAN.
# La instalación requiere el paquete `BiocManager`.
# Descomenta y ejecuta si no tienes los paquetes instalados.
# install.packages("BiocManager")
# BiocManager::install("ComplexHeatmap")
# install.packages("tidyverse")
library(tidyverse)
library(ComplexHeatmap)
# ---- SECCIÓN 2: CARGA DE DATOS ----
# Continuamos trabajando con el dataset de expresión génica de hígado.
ruta_archivo_datos <- "../data/human_liver_rnaseq_gene_expression_903_samples.tsv"
liver_df <- read_tsv(ruta_archivo_datos)
install.packages("patchwork")
# -----------------------------------------------------------------------------
# script_day_5.R — De la Pantalla al Paper: Figuras de Calidad para Publicación
# Autor: Instructor del Taller
# Fecha: 04 de Octubre de 2025
#
# Descripción:
# Este es el script final del taller, uniendo todo lo que hemos aprendido.
# El objetivo es crear un script único y reproducible que:
# 1. Genere los paneles individuales más importantes de la semana (violín, barras, dispersión).
# 2. Ensamble estos paneles en una única figura multi-panel usando `patchwork`.
# 3. Guarde la figura final en múltiples formatos (raster y vectorial) con
#    especificaciones de calidad para publicación.
#
# Decisión Pedagógica:
# Este script está diseñado para ser un "entregable final". Se enfatiza la limpieza
# del código y la reproducibilidad. Incluye la carga de múltiples paquetes y
# conjuntos de datos para simular un proyecto del mundo real. El código de cada
# gráfico se ha simplificado y limpiado para centrarse en el resultado final.
# -----------------------------------------------------------------------------
# ---- SECCIÓN 1: CONFIGURACIÓN DEL ENTORNO ----
# Cargamos todos los paquetes que necesitaremos para nuestro análisis completo.
# install.packages("tidyverse")
# install.packages("viridis")
# install.packages("patchwork")
library(tidyverse)
library(viridis)
library(patchwork) # ¡La estrella de hoy!
# ---- SECCIÓN 2: CARGA DE DATOS ----
# Un script reproducible carga todos los datos que necesita.
# Cargamos los datos del microbioma para los paneles A y B.
meta_df <- read_csv("../data/asd_metadata.csv")
install.packages("data.table")
Especialidad_Bioinformatica
Especialidad_Bioinformatica
setwd("D:/Desktop/Conociverso/Especialidad_Bioinformatica/Inteligencia_Artificial/data")
library(data.table)
file_name <- "azm_sr_gwas_filtered_unitigs.csv"
dt <- fread(file_name, comment.char = "#")   # returns a data.table
dt <- fread(file_name)   # returns a data.table
str(dt)
head(dt)
View(dt)
